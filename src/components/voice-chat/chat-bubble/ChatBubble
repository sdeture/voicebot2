/**
 * ChatBubble.tsx
 * ------------
 * Individual message bubble in the chat.
 */

import React from 'react';
import { Avatar, AvatarFallback, AvatarImage } from '../../ui/avatar';
import { ChatMessage } from '../../../hooks/ui/use-chat-history';

interface ChatBubbleProps {
  message: ChatMessage;
}

const ChatBubble: React.FC<ChatBubbleProps> = ({ message }) => {
  // Format timestamp to readable time
  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const isUserMessage = message.sender === 'user';

  return (
    <div className={`flex ${isUserMessage ? 'justify-end' : 'justify-start'}`}>
      <div className={`flex max-w-[80%] ${isUserMessage ? 'flex-row-reverse' : 'flex-row'}`}>
        <div className="flex-shrink-0 mt-1">
          {isUserMessage ? (
            <Avatar>
              <AvatarImage
                src="https://api.dicebear.com/7.x/avataaars/svg?seed=user"
                alt="User"
              />
              <AvatarFallback>You</AvatarFallback>
            </Avatar>
          ) : (
            <Avatar>
              <AvatarImage
                src="https://api.dicebear.com/7.x/bottts/svg?seed=ai-assistant"
                alt="AI Assistant"
              />
              <AvatarFallback>AI</AvatarFallback>
            </Avatar>
          )}
        </div>
        <div
          className={`mx-2 px-4 py-3 rounded-lg ${
            isUserMessage
              ? 'bg-primary text-primary-foreground'
              : 'bg-muted text-foreground'
          }`}
        >
          <div className="whitespace-pre-wrap break-words">
            {message.content}
          </div>
          <div
            className={`text-xs mt-1 ${
              isUserMessage
                ? 'text-primary-foreground/70'
                : 'text-muted-foreground'
            }`}
          >
            {formatTime(message.timestamp)}
            {message.status && isUserMessage && (
              <span className="ml-2">
                {message.status === 'sending' && '• Sending...'}
                {message.status === 'sent' && '• Sent'}
                {message.status === 'error' && '• Failed to send'}
              </span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatBubble;